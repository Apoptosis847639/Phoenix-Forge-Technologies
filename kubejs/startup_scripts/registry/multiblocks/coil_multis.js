const CoilWorkableElectricMultiblockMachine = Java.loadClass("com.gregtechceu.gtceu.api.machine.multiblock.CoilWorkableElectricMultiblockMachine")
Java.loadClass("com.gregtechceu.gtceu.api.GTValues")
GTCEuStartupEvents.registry('gtceu:recipe_type', phoenix => {
  phoenix.create('superheated_pyrolyzing_oven')
    .category('cracking_overload')
    .setEUIO('in')
    .setMaxIOSize(2, 1, 1, 1) // Adjusted values
    .setSlotOverlay(false, false, GuiTextures.SOLIDIFIER_OVERLAY)
    .setProgressBar(GuiTextures.PROGRESS_BAR_ARROW, FillDirection.LEFT_TO_RIGHT)
    .setSound(GTSoundEntries.CHEMICAL);
});
GTCEuStartupEvents.registry('gtceu:machine', event => {
const GCYMRecipeTypes = Java.loadClass("com.gregtechceu.gtceu.common.data.GCYMRecipeTypes") // Have to load it here because ALLOY_BLAST_RECIPES is not defined outside of the event
event.create("emberwake_alloy_hearth", "multiblock")
        .machine((holder) => new CoilWorkableElectricMultiblockMachine(holder))
        .rotationState(RotationState.ALL)
        .recipeTypes(GCYMRecipeTypes.ALLOY_BLAST_RECIPES)
        .recipeModifiers([GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers.OC_PERFECT, (machine, recipe) => GTRecipeModifiers.ebfOverclock(machine, recipe)])
        .appearanceBlock(GCYMBlocks.CASING_HIGH_TEMPERATURE_SMELTING)
        .pattern(definition => FactoryBlockPattern.start()
            .aisle("BCCCB", "BCDCB", "BCDCB", "BEEEB", "BFFFB", "BCCCB", "BBBBB", "BBBBB", "BBBBB")
            .aisle("CCCCC", "CDGDC", "CADAC", "EADAE", "FAFAF", "CCCCC", "BCFCB", "BBFBB", "BBFBB")
            .aisle("CCCCC", "DGHGD", "DDHDD", "EDHDE", "FFAFF", "CCCCC", "BFCFB", "BFAFB", "BFIFB")
            .aisle("CCCCC", "CDGDC", "CADAC", "EADAE", "FAFAF", "CCCCC", "BCFCB", "BBFBB", "BBFBB")
            .aisle("BCCCB", "BCJCB", "BCDCB", "BEEEB", "BFFFB", "BCCCB", "BBBBB", "BBBBB", "BBBBB")
            .where("A", Predicates.blocks("minecraft:air"))
            .where('B', Predicates.any())
           .where('C', Predicates.blocks('gtceu:high_temperature_smelting_casing').setMinGlobalLimited(10) 
                .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1))
                .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1))
                .or(Predicates.autoAbilities(definition.getRecipeTypes())))
            .where("D", Predicates.blocks("gtceu:neutronium_frame"))
            .where("E", Predicates.blocks("gtceu:heat_vent"))
            .where("F", Predicates.heatingCoils())
            .where("G", Predicates.blocks("gtceu:fusion_coil"))
            .where("H", Predicates.blocks("gtceu:robust_machine_casing"))
            .where("I", Predicates.abilities(PartAbility.MUFFLER).setExactLimit(1))
            .where('J', Predicates.controller(Predicates.blocks(definition.get())))
            .build())
        .workableCasingRenderer("gtceu:block/casings/gcym/high_temperature_smelting_casing", 'gtceu:block/multiblock/gcym/blast_alloy_smelter', false);

    // --- ADVANCED CRACKING UNIT ---
    event.create("advanced_cracking_unit", "multiblock")
        .rotationState(RotationState.NON_Y_AXIS)
        .machine((holder) => new CoilWorkableElectricMultiblockMachine(holder))
        .recipeTypes("cracker")
        .recipeModifiers([GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers.OC_NON_PERFECT_SUBTICK, (machine, recipe) => GTRecipeModifiers.crackerOverclock(machine, recipe)])
        .appearanceBlock(GTBlocks.CASING_TUNGSTENSTEEL_TURBINE)
        .pattern(definition => FactoryBlockPattern.start()
            .aisle("BBCCCCCBB", "DBDDDDDBD", "DBDDDDDBD", "DBDDDDDBD", "DBDDDDDBD", "DDDDDDDDD", "DDDDDDDDD", "DDDDDDDDD")
.aisle("BEEEEEEEB", "BEFFFFFEB", "BEEEEEEEB", "BEEEEEEEB", "BEEEEEEEB", "DBCBBBCBD", "DDCBBBCDD", "DDCBBBCDD")
.aisle("CEEEEEEEC", "DFAGAAAFD", "DHAAAAAHD", "DHAGAGAHD", "DHHEEEHHD", "DIHAAAHID", "DDHAAAHDD", "DDBJJJBDD")
.aisle("CEEEEEEEC", "DFGKGKGFD", "DHAGAGAHD", "DHGKGKGHD", "DHHEAEHHD", "DIHAAAHID", "DDHAAAHDD", "DDBJLJBDD")
.aisle("CEEEEEEEC", "DFAGAGAFD", "DHAAAAAHD", "DHAGAGAHD", "DHHEEEHHD", "DIHAAAHID", "DDHAAAHDD", "DDBJJJBDD")
.aisle("BEEEEEEEB", "BEMMMMMEB", "BEMMNMMEB", "BEMMMMMEB", "BEEEEEEEB", "DBCBBBCBD", "DDCBBBCDD", "DDCBBBCDD")
.aisle("BBCDDDCBB", "DBCDDDCBD", "DBCDDDCBD", "DBCDDDCBD", "DBCCCCCBD", "DDDDDDDDD", "DDDDDDDDD", "DDDDDDDDD")
   .where("A", Predicates.blocks("minecraft:air"))
   .where('B', Predicates.blocks('gtceu:tungstensteel_turbine_casing').setMinGlobalLimited(10) 
                .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1))
                .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1))
                .or(Predicates.autoAbilities(definition.getRecipeTypes())))
   .where("C", Predicates.blocks("gtceu:void_touched_tungsten_steel_frame"))
   .where("D", Predicates.any())
   .where("E", Predicates.blocks("gtceu:robust_machine_casing"))
   .where("F", Predicates.blocks("gtceu:tungstensteel_firebox_casing"))
   .where("G", Predicates.blocks("gtceu:tungstensteel_pipe_casing"))
   .where("H", Predicates.heatingCoils())
   .where("I", Predicates.blocks("gtceu:high_temperature_smelting_casing"))
   .where("J", Predicates.blocks("gtceu:sturdy_machine_casing"))
   .where("K", Predicates.blocks("gtceu:extreme_engine_intake_casing"))
   .where("L", Predicates.abilities(PartAbility.MUFFLER).setExactLimit(1))
   .where("M", Predicates.blocks("gtceu:clean_machine_casing"))
   .where('N', Predicates.controller(Predicates.blocks(definition.get())))
            .where('I', Predicates.controller(Predicates.blocks(definition.get())))
            .build())
        .workableCasingRenderer("gtceu:block/casings/mechanic/machine_casing_turbine_tungstensteel",
            "gtceu:block/multiblock/cracking_unit", false);

    // --- SUPERHEATED PYROLYZING OVEN ---
    event.create("superheated_pyrolyzing_oven", "multiblock")
        .rotationState(RotationState.NON_Y_AXIS)
        .machine((holder) => new CoilWorkableElectricMultiblockMachine(holder))
        .recipeTypes('pyrolyse_oven')
        .recipeModifiers([GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers.OC_NON_PERFECT_SUBTICK, (machine, recipe) => GTRecipeModifiers.pyrolyseOvenOverclock(machine, recipe)])
        .appearanceBlock(GTBlocks.CASING_STEEL_SOLID)
        .pattern(definition => FactoryBlockPattern.start()
.aisle("BCBBBBBCB", "BDBBBBBDB", "BDBBBBBDB", "BDBBBBBDB", "BDBBBBBDB", "BDBBBBBDB", "BDBBBBBDB", "BCBBBBBCB")
.aisle("CCEEEEECC", "DCFFFFFCD", "DCFFFFFCD", "DCFFFFFCD", "DCFFFFFCD", "DCFFFFFCD", "DCFFFFFCD", "CCCCCCCCC")
.aisle("BEGGGGGEB", "BFHIJIHFB", "BFHIJIHFB", "BFHIJIHFB", "BFHIJIHFB", "BFHIJIHFB", "BFHIJIHFB", "BCHCCCHCB")
.aisle("BEGGGGGEB", "BFIAAAIFB", "BFIAAAIFB", "BFIAAAIFB", "BFIAAAIFB", "BFIAAAIFB", "BFIAAAIFB", "BCCGGGCCB")
.aisle("BEGGGGGEB", "BFJAAAJFB", "BFJAAAJFB", "BFJAAAJFB", "BFJAAAJFB", "BFJAAAJFB", "BFJAAAJFB", "BCCGKGCCB")
.aisle("BEGGGGGEB", "BFIAAAIFB", "BFIAAAIFB", "BFIAAAIFB", "BFIAAAIFB", "BFIAAAIFB", "BFIAAAIFB", "BCCGGGCCB")
.aisle("BEGGGGGEB", "BFHIJIHFB", "BFHIJIHFB", "BFHIJIHFB", "BFHIJIHFB", "BFHIJIHFB", "BFHIJIHFB", "BCHCCCHCB")
.aisle("CCEEEEECC", "DCFFFFFCD", "DCFFFFFCD", "DCFFFFFCD", "DCFFFFFCD", "DCFFFFFCD", "DCFFFFFCD", "CCCCLCCCC")
.aisle("BCBBBBBCB", "BDBBBBBDB", "BDBBBBBDB", "BDBBBBBDB", "BDBBBBBDB", "BDBBBBBDB", "BDBBBBBDB", "BCBBBBBCB")
   .where("A", Predicates.blocks("minecraft:air"))
   .where("B", Predicates.any())
   .where('C', Predicates.blocks('gtceu:solid_machine_casing').setMinGlobalLimited(10) 
                .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1))
                .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1))
                .or(Predicates.autoAbilities(definition.getRecipeTypes())))
   .where("D", Predicates.blocks("gtceu:void_touched_tungsten_steel_frame"))
   .where("E", Predicates.blocks("gtceu:steel_firebox_casing"))
   .where("F", Predicates.blocks("gtceu:laminated_glass"))
   .where("G", Predicates.blocks("gtceu:high_temperature_smelting_casing"))
   .where("H", Predicates.blocks("gtceu:resonant_rhodium_alloy_frame"))
   .where("I", Predicates.blocks("gtceu:heat_vent"))
   .where("J", Predicates.heatingCoils())
   .where("K", Predicates.abilities(PartAbility.MUFFLER).setExactLimit(1))
   .where('L', Predicates.controller(Predicates.blocks(definition.get())))
            .build())
        .workableCasingRenderer("gtceu:block/casings/solid/machine_casing_solid_steel",
            "gtceu:block/multiblock/pyrolyse_oven", false);

        
})